#include <Servo.h>   // Servo library 
#include "HX711.h"   // HX711 library for load cell

Servo sg90;

// Ultrasonic Sensor 1 (Servo-controlled)
int echo1 = 7;
int trig1 = 6;

// Ultrasonic Sensor 2 (For percentage display)
int echo2 = 5;
int trig2 = 4;

int servopin = 8;
int distance1, distance2;
int duration1, duration2;

// Bin specifications for Sensor 2
const int maxDistance = 22;  // Distance in cm when the bin is empty
const int minDistance = 5;   // Distance in cm when the bin is full

// Pin configuration for HX711 (Load Cell)
#define DOUT  3  // Data pin (DT) connected to Arduino pin 3
#define CLK   2  // Clock pin (SCK) connected to Arduino pin 2

HX711 scale;
float calibration_factor = 221369.00;  // Calibration factor, adjust this as per your load cell

void setup() {       
    // Initialize servo motor
    sg90.attach(servopin);  // Servo attached to pin 8
    
    // Set up Ultrasonic Sensor 1 (servo-controlled)
    pinMode(trig1, OUTPUT);  
    pinMode(echo1, INPUT);  
    
    // Set up Ultrasonic Sensor 2 (for waste percentage)
    pinMode(trig2, OUTPUT);  
    pinMode(echo2, INPUT);  
    
    // Initialize serial communication
    Serial.begin(9600);

    // Initialize the HX711 scale (Load Cell)
    scale.begin(DOUT, CLK);
    
    // Set the calibration factor
    scale.set_scale(calibration_factor);
    
    // Tare the scale (reset to zero)
    scale.tare();  // Set the current weight (including the bin) to zero
    Serial.println("Scale is tared (set to zero).");
}

void loop() {
  // 1. Measure distance from Sensor 1 (Servo control)
  digitalWrite(trig1, LOW);
  delay(2);
  digitalWrite(trig1, HIGH);
  delayMicroseconds(10);
  digitalWrite(trig1, LOW); 
  duration1 = pulseIn(echo1, HIGH);
  distance1 = duration1 * 0.034 / 2;

  // Control servo motor based on Sensor 1 distance
  if (distance1 < 30) {   
    sg90.write(0);    
    delay(2500);  // Keep servo at 0 degrees for 2 seconds
  } else {
    sg90.write(180);
    delay(50);
  }

  // 2. Measure distance from Sensor 2 (Percentage calculation)
  digitalWrite(trig2, LOW);
  delay(2);
  digitalWrite(trig2, HIGH);
  delayMicroseconds(10);
  digitalWrite(trig2, LOW); 
  duration2 = pulseIn(echo2, HIGH);
  distance2 = duration2 * 0.034 / 2;

  // Calculate waste percentage based on Sensor 2 reading
  int wastePercentage = map(distance2, maxDistance, minDistance, 0, 100);
  wastePercentage = constrain(wastePercentage, 0, 100);  // Ensure percentage is within 0-100%

  // Display the waste percentage on the serial monitor
  Serial.print("Waste Level: ");
  Serial.print(wastePercentage);
  Serial.println("%");

  // 3. Read and display weight from the load cell
  float weight = (scale.get_units() * 1000) ;  // Convert the weight to grams by multiplying by 1000
  
  // Adjust weight reading to zero if it is negative (if needed)
  if (weight < 0) {
    weight = 0;
  }

  // Display the waste weight only
  Serial.print("Waste Weight: ");
  Serial.print(weight, 2);  // Print the weight with 2 decimal places
  Serial.println(" grams");

  delay(2000);  // Delay before the next loop iteration
}
